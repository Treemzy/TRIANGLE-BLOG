{"ast":null,"code":"import axios from \"axios\";\nimport { POST_LIST_REQUEST, POST_LIST_SUCCESS, POST_LIST_FAIL, POST_DETAILS_REQUEST, POST_DETAILS_SUCCESS, POST_DETAILS_FAIL, POST_CREATE_COMMENT_REQUEST, POST_CREATE_COMMENT_SUCCESS, POST_CREATE_COMMENT_FAIL, POST_CREATE_LIKE_REQUEST, POST_CREATE_LIKE_SUCCESS, POST_CREATE_LIKE_FAIL, POST_CREATE_LIKE_RESET } from '../constants/postConstants';\nimport { toast } from \"react-toastify\";\nexport const listPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts`);\n    dispatch({\n      type: POST_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const listPostsAfterLike = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_CREATE_LIKE_UPDATE_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts`);\n    dispatch({\n      type: POST_CREATE_LIKE_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_CREATE_LIKE_UPDATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const listPostDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: POST_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: POST_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const createPostComment = (postId, comment) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: POST_CREATE_COMMENT_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\n\n    const {\n      data\n    } = await axios.post(`/api/posts/${postId}/comments/`, comment, config);\n    dispatch({\n      type: POST_CREATE_COMMENT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_CREATE_COMMENT_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n    toast.error('Error. ! Maybe the field is empty', {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  }\n};\nexport const createPostLike = (postLikeId, like) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: POST_CREATE_LIKE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\n\n    const {\n      data\n    } = await axios.post(`/api/posts/${postLikeId}/likes/`, like, config);\n    dispatch({\n      type: POST_CREATE_LIKE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_CREATE_LIKE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","POST_LIST_REQUEST","POST_LIST_SUCCESS","POST_LIST_FAIL","POST_DETAILS_REQUEST","POST_DETAILS_SUCCESS","POST_DETAILS_FAIL","POST_CREATE_COMMENT_REQUEST","POST_CREATE_COMMENT_SUCCESS","POST_CREATE_COMMENT_FAIL","POST_CREATE_LIKE_REQUEST","POST_CREATE_LIKE_SUCCESS","POST_CREATE_LIKE_FAIL","POST_CREATE_LIKE_RESET","toast","listPosts","dispatch","type","data","get","payload","error","response","detail","listPostsAfterLike","POST_CREATE_LIKE_UPDATE_REQUEST","POST_CREATE_LIKE_UPDATE_SUCCESS","POST_CREATE_LIKE_UPDATE_FAIL","listPostDetails","id","createPostComment","postId","comment","getState","userLogin","userInfo","config","headers","Authorization","token","post","message","position","POSITION","TOP_RIGHT","createPostLike","postLikeId","like"],"sources":["C:/Users/Treemzy/Documents/ReactApps/ReactDjangoBlog/project/frontend/src/actions/postActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { \r\n    POST_LIST_REQUEST,\r\n    POST_LIST_SUCCESS,\r\n    POST_LIST_FAIL,\r\n\r\n    POST_DETAILS_REQUEST,\r\n    POST_DETAILS_SUCCESS,\r\n    POST_DETAILS_FAIL,\r\n\r\n    POST_CREATE_COMMENT_REQUEST,\r\n    POST_CREATE_COMMENT_SUCCESS,\r\n    POST_CREATE_COMMENT_FAIL,\r\n\r\n    POST_CREATE_LIKE_REQUEST,\r\n    POST_CREATE_LIKE_SUCCESS,\r\n    POST_CREATE_LIKE_FAIL,\r\n    POST_CREATE_LIKE_RESET,\r\n\r\n } from '../constants/postConstants'\r\n import { toast } from \"react-toastify\";\r\n\r\n export const listPosts = () => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_LIST_REQUEST });\r\n      const { data } = await axios.get(`/api/posts`);\r\n      dispatch({\r\n        type: POST_LIST_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_LIST_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  export const listPostsAfterLike = () => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_LIKE_UPDATE_REQUEST });\r\n      const { data } = await axios.get(`/api/posts`);\r\n      dispatch({\r\n        type: POST_CREATE_LIKE_UPDATE_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_CREATE_LIKE_UPDATE_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  export const listPostDetails = (id) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_DETAILS_REQUEST });\r\n      const { data } = await axios.get(`/api/posts/${id}`);\r\n      dispatch({\r\n        type: POST_DETAILS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_DETAILS_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  export const createPostComment = (postId, comment) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_COMMENT_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\r\n      const { data } = await axios.post(`/api/posts/${postId}/comments/`, comment, config);\r\n  \r\n      dispatch({\r\n        type: POST_CREATE_COMMENT_SUCCESS,\r\n        payload: data,\r\n      });\r\n      \r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_CREATE_COMMENT_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n      toast.error('Error. ! Maybe the field is empty', {\r\n        position: toast.POSITION.TOP_RIGHT\r\n    });\r\n    }\r\n  };\r\n\r\n  export const createPostLike = (postLikeId, like) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_LIKE_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\r\n      const { data } = await axios.post(`/api/posts/${postLikeId}/likes/`, like, config);\r\n  \r\n      dispatch({\r\n        type: POST_CREATE_LIKE_SUCCESS,\r\n        payload: data,\r\n      });\r\n      \r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_CREATE_LIKE_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}