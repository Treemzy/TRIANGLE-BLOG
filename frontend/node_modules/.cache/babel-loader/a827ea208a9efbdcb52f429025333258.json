{"ast":null,"code":"import axios from \"axios\";\nimport { POST_LIST_REQUEST, POST_LIST_SUCCESS, POST_LIST_FAIL, POST_DETAILS_REQUEST, POST_DETAILS_SUCCESS, POST_DETAILS_FAIL, POST_DETAILS_RESET, POST_CREATE_COMMENT_REQUEST, POST_CREATE_COMMENT_SUCCESS, POST_CREATE_COMMENT_FAIL, POST_CREATE_LIKE_REQUEST, POST_CREATE_LIKE_SUCCESS, POST_CREATE_LIKE_FAIL, POST_CREATE_LIKE_RESET, POST_TRENDING_REQUEST, POST_TRENDING_SUCCESS, POST_TRENDING_FAIL, POST_DELETE_REQUEST, POST_DELETE_SUCCESS, POST_DELETE_FAIL } from '../constants/postConstants';\nimport { toast } from \"react-toastify\";\nexport const listPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts`);\n    dispatch({\n      type: POST_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const listPostDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: POST_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: POST_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const createPostComment = (postId, comment) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: POST_CREATE_COMMENT_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\n\n    const {\n      data\n    } = await axios.post(`/api/posts/${postId}/comments/`, comment, config);\n    dispatch({\n      type: POST_CREATE_COMMENT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_CREATE_COMMENT_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const createPostLike = (postLikeId, like) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: POST_CREATE_LIKE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\n\n    const {\n      data\n    } = await axios.post(`/api/posts/${postLikeId}/likes/`, like, config);\n    dispatch({\n      type: POST_CREATE_LIKE_SUCCESS,\n      payload: data\n    });\n    dispatch(listPostDetails(postLikeId));\n    dispatch(listPosts(postLikeId));\n    dispatch(listTrendingPosts(postLikeId));\n    dispatch({\n      type: POST_CREATE_LIKE_RESET\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_CREATE_LIKE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const listTrendingPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TRENDING_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/posts/trending/`);\n    dispatch({\n      type: POST_TRENDING_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_TRENDING_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.detail\n    });\n  }\n};\nexport const deletePost = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: POST_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/posts/delete/${id}`, config);\n    dispatch({\n      type: POST_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_DELETE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","POST_LIST_REQUEST","POST_LIST_SUCCESS","POST_LIST_FAIL","POST_DETAILS_REQUEST","POST_DETAILS_SUCCESS","POST_DETAILS_FAIL","POST_DETAILS_RESET","POST_CREATE_COMMENT_REQUEST","POST_CREATE_COMMENT_SUCCESS","POST_CREATE_COMMENT_FAIL","POST_CREATE_LIKE_REQUEST","POST_CREATE_LIKE_SUCCESS","POST_CREATE_LIKE_FAIL","POST_CREATE_LIKE_RESET","POST_TRENDING_REQUEST","POST_TRENDING_SUCCESS","POST_TRENDING_FAIL","POST_DELETE_REQUEST","POST_DELETE_SUCCESS","POST_DELETE_FAIL","toast","listPosts","dispatch","type","data","get","payload","error","response","detail","listPostDetails","id","createPostComment","postId","comment","getState","userLogin","userInfo","config","headers","Authorization","token","post","message","createPostLike","postLikeId","like","listTrendingPosts","deletePost","delete"],"sources":["C:/Users/Treemzy/Documents/ReactApps/ReactDjangoBlog/project/frontend/src/actions/postActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { \r\n    POST_LIST_REQUEST,\r\n    POST_LIST_SUCCESS,\r\n    POST_LIST_FAIL,\r\n\r\n    POST_DETAILS_REQUEST,\r\n    POST_DETAILS_SUCCESS,\r\n    POST_DETAILS_FAIL,\r\n    POST_DETAILS_RESET,\r\n\r\n    POST_CREATE_COMMENT_REQUEST,\r\n    POST_CREATE_COMMENT_SUCCESS,\r\n    POST_CREATE_COMMENT_FAIL,\r\n\r\n    POST_CREATE_LIKE_REQUEST,\r\n    POST_CREATE_LIKE_SUCCESS,\r\n    POST_CREATE_LIKE_FAIL,\r\n    POST_CREATE_LIKE_RESET,\r\n\r\n    POST_TRENDING_REQUEST,\r\n    POST_TRENDING_SUCCESS,\r\n    POST_TRENDING_FAIL,\r\n\r\n    POST_DELETE_REQUEST,\r\n    POST_DELETE_SUCCESS,\r\n    POST_DELETE_FAIL\r\n\r\n } from '../constants/postConstants'\r\n import { toast } from \"react-toastify\";\r\n\r\n export const listPosts = () => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_LIST_REQUEST });\r\n      const { data } = await axios.get(`/api/posts`);\r\n      dispatch({\r\n        type: POST_LIST_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_LIST_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  export const listPostDetails = (id) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: POST_DETAILS_REQUEST });\r\n      const { data } = await axios.get(`/api/posts/${id}`);\r\n      dispatch({\r\n        type: POST_DETAILS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_DETAILS_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  export const createPostComment = (postId, comment) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_COMMENT_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\r\n      const { data } = await axios.post(`/api/posts/${postId}/comments/`, comment, config);\r\n  \r\n      dispatch({\r\n        type: POST_CREATE_COMMENT_SUCCESS,\r\n        payload: data,\r\n      });\r\n      \r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_CREATE_COMMENT_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  export const createPostLike = (postLikeId, like) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_LIKE_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      //here we are sending an empty {} object because we are creating the product from the backend and then updating it.\r\n      const { data } = await axios.post(`/api/posts/${postLikeId}/likes/`, like, config);\r\n      \r\n      dispatch({\r\n        type: POST_CREATE_LIKE_SUCCESS,\r\n        payload: data,\r\n      });\r\n      \r\n      dispatch(listPostDetails(postLikeId));\r\n      dispatch(listPosts(postLikeId));\r\n      dispatch(listTrendingPosts(postLikeId));\r\n      dispatch({ type: POST_CREATE_LIKE_RESET });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_CREATE_LIKE_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  export const listTrendingPosts = () => async (dispatch) => {\r\n    try {   \r\n        dispatch({ type: POST_TRENDING_REQUEST });\r\n        const { data } = await axios.get(`/api/posts/trending/`);\r\n        dispatch({\r\n          type: POST_TRENDING_SUCCESS,\r\n          payload: data,\r\n        });\r\n    } catch (error) {  \r\n        dispatch({\r\n          type: POST_TRENDING_FAIL,\r\n          payload:\r\n            error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.detail,\r\n        });\r\n    }\r\n  };\r\n\r\n  export const deletePost = (id) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: POST_DELETE_REQUEST });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.delete(`/api/posts/delete/${id}`, config);\r\n  \r\n      dispatch({\r\n        type: POST_DELETE_SUCCESS,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: POST_DELETE_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}