{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Treemzy\\\\Documents\\\\ReactApps\\\\ReactDjangoBlog\\\\project\\\\frontend\\\\src\\\\screens\\\\ProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { Form, Button, Col, Row, Table } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\"; //this constant is used to reset the frontend value after the update Action have been successfully fired on, so it refreshes the frontend before it renders it\n\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nimport { listPosts } from \"../actions/postActions\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProfileScreen() {\n  _s();\n\n  const history = useNavigate();\n  const location = useLocation();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setconfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const dispatch = useDispatch();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const userUpdateProfile = useSelector(state => state.userUpdateProfile);\n  const {\n    success\n  } = userUpdateProfile;\n  const postList = useSelector(state => state.postList);\n  const {\n    error: errorPostList,\n    loading: loadingPostList,\n    success: successPostList,\n    posts\n  } = postList;\n  useEffect(() => {\n    if (!userInfo) {\n      history(\"/login\");\n    } else {\n      if (!user || !user.name || success || userInfo._id !== user._id) {\n        dispatch({\n          type: USER_UPDATE_PROFILE_RESET\n        });\n        dispatch(getUserDetails(\"profile\"));\n        dispatch(listPosts());\n      } else {\n        dispatch(listPosts());\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, history, userInfo, user, success]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match\");\n    } else {\n      dispatch(updateUserProfile({\n        id: user._id,\n        name: name,\n        email: email,\n        password: password\n      }));\n      setMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProfileScreen, \"NV+i23eDtnIKaY3y9phRMqoQ/kw=\", false, function () {\n  return [useNavigate, useLocation, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ProfileScreen;\nexport default ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useNavigate","Form","Button","Col","Row","Table","useDispatch","useSelector","Loader","Message","FormContainer","getUserDetails","updateUserProfile","USER_UPDATE_PROFILE_RESET","listPosts","LinkContainer","ProfileScreen","history","location","name","setName","email","setEmail","password","setPassword","confirmPassword","setconfirmPassword","message","setMessage","dispatch","userLogin","state","userInfo","userUpdateProfile","success","postList","error","errorPostList","loading","loadingPostList","successPostList","posts","user","_id","type","submitHandler","e","preventDefault","id"],"sources":["C:/Users/Treemzy/Documents/ReactApps/ReactDjangoBlog/project/frontend/src/screens/ProfileScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\r\n//this constant is used to reset the frontend value after the update Action have been successfully fired on, so it refreshes the frontend before it renders it\r\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\r\nimport { listPosts } from \"../actions/postActions\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nfunction ProfileScreen() {\r\n  const history = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setconfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n \r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  const postList = useSelector((state) => state.postList);\r\n  const { error:errorPostList, loading:loadingPostList, success:successPostList, posts } = postList;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history(\"/login\");\r\n    } else {\r\n      \r\n      if (!user || !user.name || success || userInfo._id !== user._id) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET });\r\n        dispatch(getUserDetails(\"profile\"));\r\n        dispatch(listPosts());\r\n      }\r\n      else {\r\n        dispatch(listPosts());\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user, success]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n    } else {\r\n      dispatch(\r\n        updateUserProfile({\r\n          id: user._id,\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n       \r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}