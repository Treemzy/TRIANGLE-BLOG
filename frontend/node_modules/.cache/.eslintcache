[{"C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\index.js":"1","C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\App.js":"2","C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\reportWebVitals.js":"3","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\index.js":"4","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reportWebVitals.js":"5","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\App.js":"6","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Footer.js":"7","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Header.js":"8","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\HomeScreen.js":"9","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\AboutScreen.js":"10","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Jumbotron.js":"11","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\store.js":"12","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reducers\\postReducer.js":"13","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\constants\\postConstants.js":"14","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\actions\\postActions.js":"15","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Message.js":"16","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Loader.js":"17","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Posts.js":"18","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Trending.js":"19","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Reactions.js":"20","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostScreen.js":"21","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\LoginScreen.js":"22","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\FormContainer.js":"23","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reducers\\userReducers.js":"24","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\constants\\userConstants.js":"25","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\actions\\userActions.js":"26","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\ConfirmationModal.js":"27","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CreatePostScreen.js":"28","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Api.js":"29","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostEditScreen.js":"30","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\RegisterScreen.js":"31","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\ProfileScreen.js":"32","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\UserPost.js":"33","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Paginate.js":"34","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\SearchBox.js":"35","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\UserListScreen.js":"36","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\UserEditScreen.js":"37","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostListScreen.js":"38","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CategoryScreen.js":"39","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CreateCategoryScreen.js":"40","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CategoryEditScreen.js":"41","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CommentsListScreen.js":"42"},{"size":535,"mtime":1663260951479,"results":"43","hashOfConfig":"44"},{"size":528,"mtime":1663260945799,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1663260954991,"results":"46","hashOfConfig":"44"},{"size":800,"mtime":1664365704766,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1663260954991,"results":"49","hashOfConfig":"48"},{"size":2524,"mtime":1665745179676,"results":"50","hashOfConfig":"48"},{"size":444,"mtime":1665161282675,"results":"51","hashOfConfig":"48"},{"size":5563,"mtime":1665831235997,"results":"52","hashOfConfig":"48"},{"size":8451,"mtime":1665830754016,"results":"53","hashOfConfig":"48"},{"size":1144,"mtime":1665832292685,"results":"54","hashOfConfig":"48"},{"size":892,"mtime":1665831441828,"results":"55","hashOfConfig":"48"},{"size":2199,"mtime":1665739665005,"results":"56","hashOfConfig":"48"},{"size":9358,"mtime":1665749213743,"results":"57","hashOfConfig":"48"},{"size":3767,"mtime":1665587678807,"results":"58","hashOfConfig":"48"},{"size":14321,"mtime":1665869922744,"results":"59","hashOfConfig":"48"},{"size":223,"mtime":1664135601018,"results":"60","hashOfConfig":"48"},{"size":402,"mtime":1664137464069,"results":"61","hashOfConfig":"48"},{"size":4429,"mtime":1664883326462,"results":"62","hashOfConfig":"48"},{"size":2207,"mtime":1664583574896,"results":"63","hashOfConfig":"48"},{"size":5593,"mtime":1664924671087,"results":"64","hashOfConfig":"48"},{"size":10520,"mtime":1664881846326,"results":"65","hashOfConfig":"48"},{"size":3525,"mtime":1664879697587,"results":"66","hashOfConfig":"48"},{"size":391,"mtime":1664314959835,"results":"67","hashOfConfig":"48"},{"size":3920,"mtime":1665357447577,"results":"68","hashOfConfig":"48"},{"size":1532,"mtime":1665357377044,"results":"69","hashOfConfig":"48"},{"size":6869,"mtime":1665740295027,"results":"70","hashOfConfig":"48"},{"size":1629,"mtime":1665583549708,"results":"71","hashOfConfig":"48"},{"size":9968,"mtime":1665005941531,"results":"72","hashOfConfig":"48"},{"size":1219,"mtime":1664796086362,"results":"73","hashOfConfig":"48"},{"size":9482,"mtime":1665005642063,"results":"74","hashOfConfig":"48"},{"size":4011,"mtime":1665008560958,"results":"75","hashOfConfig":"48"},{"size":6047,"mtime":1665151531452,"results":"76","hashOfConfig":"48"},{"size":4435,"mtime":1665061054013,"results":"77","hashOfConfig":"48"},{"size":1008,"mtime":1665757861265,"results":"78","hashOfConfig":"48"},{"size":1201,"mtime":1665337922280,"results":"79","hashOfConfig":"48"},{"size":3655,"mtime":1665832770686,"results":"80","hashOfConfig":"48"},{"size":3765,"mtime":1665359447110,"results":"81","hashOfConfig":"48"},{"size":5783,"mtime":1665744438644,"results":"82","hashOfConfig":"48"},{"size":10140,"mtime":1665833526741,"results":"83","hashOfConfig":"48"},{"size":4995,"mtime":1665575581637,"results":"84","hashOfConfig":"48"},{"size":4828,"mtime":1665583792366,"results":"85","hashOfConfig":"48"},{"size":4001,"mtime":1665834473510,"results":"86","hashOfConfig":"48"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ikb6pj",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"1cpq9r",{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"99"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"99"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"99"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"99"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"99"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"99"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"99"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"99"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"99"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"99"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"99"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"99"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"99"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\index.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\App.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\project\\src\\reportWebVitals.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\index.js",[],[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\App.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Footer.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Header.js",["227","228","229","230"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\HomeScreen.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\AboutScreen.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Jumbotron.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\store.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reducers\\postReducer.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\constants\\postConstants.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\actions\\postActions.js",["246","247","248","249","250","251","252","253","254","255","256","257","258"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Message.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Loader.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Posts.js",["259","260","261","262","263","264","265","266","267","268","269"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { ListGroup, Card, Col,Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Reactions from '../components/Reactions'\r\n\r\nfunction Posts({ post }) {\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    let numLikes = (0);\r\n    let useLike;\r\n    {userInfo ? (\r\n        post.likes.map((like) => {                                               \r\n            return(\r\n                <span key={like._id}>\r\n                    {useLike = like.user == userInfo._id} \r\n                    {like.user == userInfo._id ? (numLikes = 1) : (numLikes)}                                                                  \r\n                </span>               \r\n            )\r\n        }) \r\n    ):(\r\n        <spa></spa>\r\n    )}\r\n\r\n\r\n    return (\r\n        <div>             \r\n            <div className=\"\">\r\n                <Card className=\"my-3 p-3 rounded\">\r\n                    <Row>\r\n                        <Col key={post._id} sm={12} md={6} lg={4} xl={4}>\r\n                            <Link to={`/post/${post._id}`}>\r\n                                <Card.Img src={post.image} />\r\n                            </Link>\r\n                        </Col>\r\n                        <Col  sm={12} md={6} lg={8} xl={8}>\r\n                            <Card.Body>\r\n                                <Link to={`/post/${post._id}`}>\r\n                                    <Card.Title as=\"div\" className=\"postTitle\">\r\n                                        <strong>{post.title}</strong>\r\n                                    </Card.Title>\r\n                                </Link>\r\n                                <Card.Text as=\"p\">\r\n                                    <div className=\"my-3\">\r\n                                    {post.description.substring(0,200)} {post.description.length >= 20 && <Link to={`/post/${post._id}`}>...Read More...</Link> } \r\n                                    </div>\r\n                                </Card.Text>\r\n                                <Card.Text as=\"div\" className=\"category\">\r\n                                    <button className=\"btn btn-outline-dark btn-sm mt-1 mb-1\">\r\n                                         {post.categories}\r\n                                         \r\n                                        \r\n                                         {/* {post.comments.map((comment) => (                      \r\n                                            <p key={comment._id}>{comment._id}</p>                                                        \r\n                                        ))}  */}\r\n                                        \r\n                                    </button>                                   \r\n                                </Card.Text>\r\n                                <hr/>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                           \r\n                                        <Reactions value={numLikes} likes={post.likes.length} comment={post.comments.length} post={post._id} user={post.user} />\r\n                                        \r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <p className=\"text-muted\">\r\n                                             <i className=\"fas fa-clock\" style={{ color:'#cc6600' }}></i>                                        \r\n                                             {post.createdAt.substring(0,10)}\r\n                                             ({moment(post.createdAt).fromNow()})\r\n                                             \r\n                                        </p>                                        \r\n                                    </div>\r\n                                </div>\r\n                            </Card.Body>  \r\n                        </Col>     \r\n                    </Row>                                 \r\n                </Card>                   \r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Trending.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Reactions.js",["270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Form, } from \"react-bootstrap\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport { createPostLike, listPostDetails, listPosts, deletePost } from \"../actions/postActions\";\r\nimport { POST_CREATE_LIKE_RESET } from '../constants/postConstants'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport ConfirmationModal from '../components/ConfirmationModal'\r\n\r\nfunction Reactions({value, likes, comment, post, userLike, user}) {\r\n\r\n    const { id } = useParams();\r\n    const history = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    let [numLikes, setnumLikes] = useState(0);\r\n\r\n    const postLikes = useSelector((state) => state.postLikes);\r\n    const { loading, error,  success: successLike } = postLikes;\r\n\r\n    \r\n    const postDelete = useSelector((state) => state.postDelete);\r\n    const { loading:loadingPostDelete, error: errorPostDelete,  success: successPostDelete } = postDelete;\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    const postList = useSelector((state) => state.postList);\r\n    const { error:postListError, loading:postListLoading, posts } = postList;\r\n\r\n    const [displayConfirmationModal, setDisplayConfirmationModal] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n    const [pid, setPid] = useState(null);\r\n\r\n\r\n\r\n    const showDeleteModal = (pid) => {\r\n        setPid(pid);\r\n        setMessage(`Are you sure you want to delete this post '${posts.find((x) => x._id === pid).title}' ? `);\r\n        setDisplayConfirmationModal(true)\r\n    };\r\n\r\n    const hideConfirmationModal = () => {\r\n        setDisplayConfirmationModal(false);\r\n        \r\n    }\r\n\r\n    const submitPostDeleteHandler = (pid) =>{\r\n        dispatch(deletePost(pid));\r\n        setDisplayConfirmationModal(false);\r\n    }\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        if(successLike){\r\n            setnumLikes(0)          \r\n        } \r\n        if(successPostDelete){\r\n            history('/')\r\n        }  \r\n      }, [dispatch, post, successLike, successPostDelete]);\r\n\r\n    const submitLikeHandler = (e) =>{\r\n        e.preventDefault()\r\n        dispatch(createPostLike(\r\n          post,{\r\n            numLikes\r\n          }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"reactions\">\r\n            <ToastContainer />\r\n            {userInfo ? (\r\n                \r\n                <span className=\"likeAction\">\r\n                    <Link onClick={submitLikeHandler}>\r\n                        <span>\r\n                            <i\r\n                            style={{ color:\"#e60000\" }}\r\n                            className={\r\n                                value >= 1\r\n                                ? \"fa fa-heart\"\r\n                                : value == 0\r\n                                ? \"fa-regular fa-heart\"                   \r\n                                : \"far fa-heart-o\"\r\n                            }\r\n                            ></i>\r\n                            {likes}\r\n                            \r\n\r\n                        </span> \r\n                    </Link>\r\n                </span>\r\n                \r\n            ):(\r\n                <span className='reaction'>\r\n                    <Link to='/login'>\r\n                        <i\r\n                        style={{ color:\"#e60000\" }}\r\n                        className={\r\n                            value >= 1\r\n                            ? \"fa fa-heart\"\r\n                            : value == 0\r\n                            ? \"fa-regular fa-heart\"                   \r\n                            : \"far fa-heart-o\"\r\n                        }\r\n                        ></i>\r\n                        {likes}\r\n                    </Link>\r\n                   \r\n                </span> \r\n            )}     \r\n            \r\n             <span className=\"reaction\">\r\n                 <Link to={`/post/${post}`}>\r\n                    <i\r\n                    style={{ color:\"\" }}\r\n                    className={\"fa fa-comment\"}\r\n                    ></i>\r\n                    {comment}\r\n                 </Link>\r\n               \r\n            </span>\r\n\r\n\r\n            <span>\r\n                <i\r\n                style={{ color:\"\" }}\r\n                className={\"fa fa-share\"}\r\n                ></i>\r\n            </span>\r\n            <span>  </span>\r\n            <span>  </span>\r\n            {userInfo && userInfo._id === user ? (\r\n                <small className='reactionDel'>\r\n                    <Link onClick={() => showDeleteModal(post)}>\r\n                        <i className=\"fas fa-trash danger cursor\"></i>\r\n                    </Link>\r\n                    \r\n                </small> \r\n            ):(\r\n                <span> </span>\r\n            )} \r\n            {userInfo && userInfo._id === user ? (\r\n                <small className='reactionEdit'>\r\n                    <Link to={`/post/${post}/edit`}>\r\n                        <i className=\"fas fa-edit cursor\"></i>\r\n                    </Link>\r\n                    \r\n                </small> \r\n            ):(\r\n                <span> </span>\r\n            )} \r\n            \r\n            <ConfirmationModal variantBtnDel={\"danger\"} ModalTitle={\"Confirmation\"} showModal={displayConfirmationModal} confirmModal={submitPostDeleteHandler} hideModal={hideConfirmationModal}  pid={pid} message={message}  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reactions\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostScreen.js",["286","287","288","289","290","291","292","293","294","295"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    Row,\r\n    Col,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n    Card,\r\n    Form,\r\n  } from \"react-bootstrap\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport Trending from '../components/Trending';\r\nimport { listPostDetails, createPostComment, deletePostComment } from \"../actions/postActions\";\r\nimport Reactions from '../components/Reactions';\r\nimport moment from 'moment';\r\nimport { POST_CREATE_COMMENT_RESET,POST_DETAILS_RESET } from '../constants/postConstants'\r\nimport ConfirmationModal from '../components/ConfirmationModal'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction PostScreen() {\r\n    const { id } = useParams();\r\n    const history = useNavigate();\r\n\r\n    const [comment, setComment] = useState('');\r\n\r\n    const [displayConfirmationModal, setDisplayConfirmationModal] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n    const [cid, setCid] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const postDetails = useSelector((state) => state.postDetails);\r\n    const { loading, error, post } = postDetails;\r\n\r\n    const postCommentDelete = useSelector((state) => state.postCommentDelete);\r\n    const { loading: deleteLoading, error: deleteError, success : deleteSuccess } = postCommentDelete;\r\n\r\n    const showDeleteModal = (cid) => {\r\n        setCid(cid);\r\n        setMessage(`Are you sure you want to delete this comment '${post.comments.find((x) => x._id === cid).comment}' ? `);\r\n\r\n        setDisplayConfirmationModal(true)\r\n    };\r\n\r\n    const hideConfirmationModal = () => {\r\n        setDisplayConfirmationModal(false);\r\n        \r\n    }\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    const postCommentsCreate = useSelector((state) => state.postCommentsCreate);\r\n    const { loading: loadingPostComment, error: errorPostComment, success: successPostComment } = postCommentsCreate;\r\n\r\n    const userIds = post.comments.map(comment => comment.user);\r\n\r\n    let numLikes = (0);\r\n    let useLike;\r\n    {userInfo ? (\r\n        post.likes.map((like) => {                                               \r\n            return(\r\n                <span key={like._id}>\r\n                    {useLike = like.user == userInfo._id} \r\n                    {like.user == userInfo._id ? (numLikes = 1) : (numLikes)}                                                                  \r\n                </span>               \r\n            )\r\n        }) \r\n    ):(\r\n        <spa></spa>\r\n    )}\r\n\r\n    \r\n    useEffect(() => {\r\n        if(successPostComment){\r\n            setComment('')\r\n            dispatch({type: POST_CREATE_COMMENT_RESET})           \r\n          }else if(deleteSuccess){\r\n            dispatch(listPostDetails(id));\r\n          }      \r\n        dispatch(listPostDetails(id));      \r\n      }, [dispatch, id, deleteSuccess, successPostComment]);\r\n\r\n    \r\n      const submitHandler = (e) =>{\r\n            e.preventDefault()\r\n            dispatch(createPostComment(\r\n            id,{\r\n                comment\r\n            }\r\n            ))\r\n        }\r\n\r\n        const submitCommentDeleteHandler = (cid) =>{\r\n            dispatch(deletePostComment(cid));\r\n            setDisplayConfirmationModal(false);\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <Link to=\"/\" className=\"btn btn-light my-3\">\r\n                <i className=\"fa fa-home\"></i>\r\n            </Link>\r\n            <ToastContainer />\r\n\r\n            {loading ? (\r\n                <Loader/>\r\n            ) : error ? (\r\n                <Message variant=\"danger\">{error}</Message>\r\n            ) :(\r\n                <div>\r\n                    <Row>\r\n                        <Col md={4}>\r\n                            <Image src={post.image} alt={post.title} fluid />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <ListGroup variant=\"flush\">\r\n                                <ListGroup.Item>\r\n                                    <p className=\"text-muted\">\r\n                                        <span className=\"badge bg-dark\">\r\n                                            {post.categories}\r\n                                        </span>\r\n                                    </p>\r\n                                    <h3>{post.title}</h3>                                    \r\n                                </ListGroup.Item>\r\n                               \r\n\r\n                                <ListGroup.Item>\r\n                                    {post.description}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                        <Reactions value={numLikes} likes={post.likes.length} comment={post.comments.length} post={post._id} user={post.user}/>\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <br/>\r\n                        <Col md={3}>\r\n                            <Trending/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <br/>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <h3>Comments</h3><hr/>\r\n                            {post.comments.length === 0 && <Message variant='info'>No Comments</Message>}\r\n                            <Card >\r\n                                {post.comments.map((comment) => (\r\n                                    <Card.Body key={comment._id} className=\"commentList\">\r\n                                        <div className=\"d-flex justify-content-between mt-2 align-items-center\">\r\n                                            <strong>{comment.name}</strong> - <small>{moment(comment.createdAt).fromNow()}</small> \r\n                                        </div>                                      \r\n                                        <p>{comment.comment}</p>\r\n\r\n\r\n                                        <div className=\"action d-flex justify-content-between mt-2 align-items-center\">\r\n                                            <div className=\"reply\">\r\n                                            \r\n                                                {userInfo && userInfo._id === comment.user ? (\r\n                                                    <small className='reaction'>\r\n                                                        <Link onClick={() => showDeleteModal(comment._id)}>\r\n                                                            <i className=\"fas fa-trash danger cursor\"></i>\r\n                                                        </Link>\r\n                                                        \r\n                                                    </small> \r\n                                                ):(\r\n                                                    <span> </span>\r\n                                                )} \r\n                                                <span>  </span>\r\n                                               <small>{comment.createdAt.substring(0,10)}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                ))}\r\n                            </Card>\r\n                            <br/>\r\n                            <ListGroup>\r\n                                <ListGroup.Item>\r\n                                    <h4>Write a Comment</h4>\r\n                                    {loadingPostComment && <Loader/>}\r\n                                    {successPostComment && <Message variant='success'>Comment Submitted</Message>}\r\n                                    {errorPostComment && <Message variant='danger'>{errorPostComment}</Message>}\r\n                                \r\n                                    {userInfo ? (\r\n                                            <Form onSubmit={submitHandler}>                                            \r\n                                                <Form.Group controlId='comment'>\r\n                                                    <Form.Label>Comment</Form.Label>\r\n                                                    <Form.Control\r\n                                                        as='textarea'\r\n                                                        row='5'\r\n                                                        value={comment}\r\n                                                        onChange={(e) => setComment(e.target.value)}\r\n                                                    >\r\n\r\n                                                    </Form.Control>\r\n                                                </Form.Group>\r\n                                                <br/>\r\n                                                <div className=\"btn-login\">\r\n                                                    <Button\r\n                                                        disabled={loadingPostComment}\r\n                                                        type='submit'\r\n                                                        variant = 'primary'\r\n                                                    > \r\n                                                        Submit\r\n                                                    </Button>\r\n                                                </div>\r\n                                            \r\n                                            </Form>\r\n                                    ) : (\r\n                                        <Message variant='info'>Please <Link to='/login'>Login</Link> to write a comment</Message>\r\n                                    )}\r\n\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n\r\n            }\r\n            <ConfirmationModal variantBtnDel={\"danger\"} ModalTitle={\"Confirmation\"} showModal={displayConfirmationModal} confirmModal={submitCommentDeleteHandler} hideModal={hideConfirmationModal}  cid={cid} message={message}  />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostScreen;\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\LoginScreen.js",["296","297"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, FormControl } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { login } from \"../actions/userActions\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction LoginScreen() {\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n  \r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [validated, setValidated] = useState(false);\r\n  \r\n    const dispatch = useDispatch();\r\n\r\n    const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { error, loading, userInfo } = userLogin;\r\n  \r\n    useEffect(() => {\r\n      if (userInfo) {\r\n        history(redirect);\r\n      }\r\n    }, [history, userInfo, redirect]);\r\n  \r\n    const submitHandler = (e) => {\r\n        const form = e.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        }\r\n    \r\n        setValidated(true);\r\n            e.preventDefault();\r\n            dispatch(login(email, password));\r\n    };\r\n\r\n\r\n    return (\r\n        \r\n        <FormContainer>\r\n            <ToastContainer />\r\n            <h1 className=\"text-center\">Sign In</h1>\r\n            {error && <Message variant=\"danger\">{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form noValidate validated={validated} onSubmit={submitHandler}>\r\n                <Form.Group controlId=\"email\">\r\n                     <Form.Label>Username</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Username\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                \r\n                <Form.Group controlId=\"password\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"password\"\r\n                        placeholder=\"Enter Password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <br />\r\n                <div className=\"btn-login\"> \r\n                    <Button type=\"submit\" variant=\"primary\">\r\n                        Sign In\r\n                    </Button>\r\n                </div>\r\n               \r\n            </Form>\r\n                <Row className=\"py-3\">\r\n                    <Col>\r\n                    New User ?{\" \"}\r\n                    <Link to={redirect ? `/register?redirect=${redirect}` : \"/register\"}>\r\n                        Register\r\n                    </Link>\r\n                    </Col>\r\n                </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\FormContainer.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\reducers\\userReducers.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\constants\\userConstants.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\actions\\userActions.js",["298","299"],[],"import {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n    \r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n    \r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n    \r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n  } from \"../constants/userConstants\";\r\n  import axios from \"axios\";\r\n  import { toast } from \"react-toastify\";\r\n  import { POST_LIST_MY_RESET } from \"../constants/postConstants\";\r\n\r\n\r\n  export const login = (email, password) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: USER_LOGIN_REQUEST,\r\n      });\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/users/login/\",\r\n        { username: email, password: password },\r\n        config\r\n      );\r\n  \r\n      dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload: data,\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    } catch (error) {\r\n      dispatch({\r\n        type: USER_LOGIN_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.detail,\r\n        \r\n      });\r\n      toast.error('Login Failed', {\r\n        position: toast.POSITION.TOP_RIGHT\r\n    });\r\n    }\r\n  };\r\n\r\n  export const logout = () => (dispatch) => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    dispatch({ type: USER_LOGOUT });\r\n    dispatch({ type: USER_DETAILS_RESET });\r\n    dispatch({ type: POST_LIST_MY_RESET });\r\n  };\r\n\r\n  export const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: USER_REGISTER_REQUEST });\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.post(\r\n        \"/api/users/register/\",\r\n        { name: name, email: email, password: password },\r\n        config\r\n      );\r\n  \r\n      dispatch({\r\n        type: USER_REGISTER_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n      dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    } catch (error) {\r\n      dispatch({\r\n        type: USER_REGISTER_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n  export const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_DETAILS_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/users/${id}/`, config);\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/users/profile/update/`,\r\n      user,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_LIST_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/users/`, config);\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_DELETE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/users/delete/${id}`, config);\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_UPDATE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/users/update/${user._id}/`,\r\n      user,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_SUCCESS,\r\n    });\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\ConfirmationModal.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CreatePostScreen.js",["300","301","302","303","304","305","306","307","308","309","310"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, FormControl, ListGroup } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { login } from \"../actions/userActions\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { createPost, listCategoryPost, listPosts } from '../actions/postActions'\r\nimport axios from 'axios';\r\nimport { POST_CREATE_RESET } from '../constants/postConstants'\r\n\r\nfunction CreatePostScreen() {\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { error, loading, userInfo } = userLogin;\r\n\r\n    const listCategory = useSelector((state) => state.listCategory);\r\n    const { error:categoryError, loading:categoryLoading, success:categorySuccess, categories } = listCategory;\r\n\r\n    const postCreate = useSelector((state) => state.postCreate);\r\n    const { error:errorPostCreate, loading: loadingPostCreate, success: successPostCreate } = postCreate;\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        category:\"\",\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        category:\"\",\r\n    });\r\n\r\n    const handleChange = ({ currentTarget: input }) => {\r\n        let newData = { ...formData };\r\n        newData[input.name] = input.value;\r\n        setFormData(newData);\r\n    };\r\n\r\n    const handleImageChange = (e) => {\r\n        let newData = { ...formData };\r\n        newData[\"image\"] = e.target.files[0];\r\n        \r\n        setFormData(newData);\r\n    };\r\n    const clearForm = () => {  \r\n        document.getElementById(\"myFile\").value = \"\";      \r\n        setFormData({\r\n            title: \"\",\r\n            description: \"\",\r\n            image: \"\",\r\n            category: \"\",\r\n            newData: \"\",\r\n        })\r\n\r\n    }\r\n\r\n    const doSubmit = async (e) => {        \r\n        e.preventDefault();\r\n        if(formData.title.trim().length === 0){\r\n            setErrors({\r\n                \"title\": [\r\n                    \"Title field is required.\"\r\n                ]\r\n            })\r\n        }else if(formData.image.length === 0){\r\n            setErrors({\r\n                \"image\": [\r\n                    \"Image field is required.\"\r\n                ]\r\n            })\r\n        }\r\n        else if(formData.description.trim().length === 0){\r\n            setErrors({\r\n                \"description\": [\r\n                    \"Description field is required.\"\r\n                ]\r\n            })\r\n        }\r\n        else if(formData.category.trim().length === null){\r\n            setErrors({\r\n                \"category\": [\r\n                    \"Category field is required.\"\r\n                ]\r\n            })\r\n        }       \r\n        else{\r\n            try{\r\n                await dispatch(createPost(\r\n                    formData,\r\n                    \r\n                ));\r\n            } catch (error){\r\n                console.log(error)\r\n            }\r\n\r\n        }\r\n              \r\n    };\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n          history(\"/login\");\r\n        }\r\n        else if (successPostCreate) {\r\n            clearForm()   \r\n            toast.success('Posted Successfully.', {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            }); \r\n            dispatch({type: POST_CREATE_RESET})    \r\n            dispatch(listPosts());       \r\n          }\r\n        dispatch(listCategoryPost());\r\n      }, [dispatch, history, userInfo,errorPostCreate,successPostCreate]);\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/\" className=\"btn btn-light my-3\">\r\n                <i className=\"fa fa-home\"></i>\r\n            </Link>\r\n            <FormContainer>\r\n            <ToastContainer/>\r\n            <h4 className=\"text-center\">Create Post</h4>\r\n            {loadingPostCreate ? (<Loader/>\r\n                ) : errorPostCreate ? (\r\n                <Message variant=\"danger\">{errorPostCreate}</Message>\r\n                ) : (\r\n                    \r\n                    <Form className=\"createLabel\" validated>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    as=\"select\"\r\n                                    name=\"category\"\r\n                                    defaultValue={{label: \"Select\", value:0}}\r\n                                    value={formData.category ? formData.category : '' }\r\n                                    isInvalid={errors.category}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                >\r\n                                <option key={'empty'} value={''} defaultValue hidden> \r\n                                    {'-- Select Category --'}\r\n                                </option>\r\n                                {\r\n                                    categories.map((c) => \r\n                                    \r\n                                        <option key={c._id} value={c._id}>\r\n                                            {c.name}\r\n                                        </option>\r\n                                    )\r\n                                }\r\n                                {errors.category && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.category}\r\n                                    </Form.Text>\r\n                                )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    placeholder=\"Type Your Post Title\"\r\n                                    value={formData.title}\r\n                                    isInvalid={errors.title}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.title && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.title}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Image</Form.Label>\r\n                                <Form.Control\r\n                                    id = \"myFile\"\r\n                                    required\r\n                                    type=\"file\"\r\n                                    name=\"image\"\r\n                                    accept=\"image/jpeg,image/png,image/gif\"\r\n                                    onChange={(e) => {\r\n                                        handleImageChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.image && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                        {errors.image}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                required\r\n                                rows={10}\r\n                                name=\"description\"\r\n                                placeholder=\"Type Description\"\r\n                                value={formData.description}\r\n                                isInvalid={errors.description}\r\n                                onChange={(e) => {\r\n                                    handleChange(e);\r\n                                }}\r\n                            />\r\n                            {errors.description && (\r\n                                <Form.Text className=\"errMsg text-danger\">\r\n                                    {errors.description}\r\n                                </Form.Text>\r\n                            )}\r\n                        </Form.Group>\r\n                        <div className=\"btn-login\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={(e) => doSubmit(e)}\r\n                                >\r\n                                POST\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                </Form>\r\n                )\r\n            }\r\n            \r\n        </FormContainer>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CreatePostScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Api.js",["311","312","313"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostEditScreen.js",["314","315","316","317","318","319","320","321"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { Link, useParams, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, Image } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { listPostDetails, listCategoryPost, updatePost } from \"../actions/postActions\";\r\nimport { POST_UPDATE_RESET } from '../constants/postConstants'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction PostEditScreen() {\r\n\r\n    const { id } = useParams();\r\n    const postId = id;\r\n\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    \r\n    const listCategory = useSelector((state) => state.listCategory);\r\n    const { error:categoryError, loading: categoryLoading, success: categorySuccess, categories } = listCategory; \r\n    \r\n    const postDetails = useSelector((state) => state.postDetails);\r\n    const { error, loading, post } = postDetails;\r\n\r\n    const postUpdate = useSelector((state) => state.postUpdate);\r\n    const { error:errorUpdate, loading:loadingUpdate, success: successUpdate } = postUpdate;\r\n\r\n  \r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        category:\"\",\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        category:\"\",\r\n    });\r\n\r\n    const handleChange = ({ currentTarget: input }) => {\r\n        let newData = { ...formData };\r\n        newData[input.name] = input.value;\r\n        setFormData(newData);\r\n    };\r\n\r\n    const handleImageChange = (e) => {\r\n        let newData = { ...formData };\r\n        newData[\"image\"] = e.target.files[0];\r\n        \r\n        setFormData(newData);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {         \r\n        if(successUpdate){\r\n            dispatch({type: POST_UPDATE_RESET})\r\n            history('')\r\n            toast.success('Updated Successfully.', {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            }); \r\n        }else{\r\n            if (!post.title || post._id !== Number(postId)) {\r\n              dispatch(listPostDetails(postId));\r\n              } else {                 \r\n                let setData = { ...formData };\r\n                setData[\"image\"] = post.image;\r\n                setData[\"title\"] = post.title;\r\n                setData[\"description\"] = post.description;\r\n                setData[\"category\"] = post.category;\r\n\r\n                setFormData(setData)\r\n              } \r\n          }        \r\n        dispatch(listCategoryPost());    \r\n    }, [dispatch, post, postId, history, successUpdate]);\r\n\r\n    \r\n    const doSubmit = async (e) => {        \r\n        e.preventDefault();\r\n           await dispatch(updatePost({\r\n                _id: postId,\r\n                title: formData.title,\r\n                image: formData.image,\r\n                category: formData.category,\r\n                description: formData.description,                \r\n            }));    \r\n         };\r\n\r\n    return (\r\n        <div>\r\n             <Link to=\"/\" className=\"btn btn-light my-3\">\r\n                <i className=\"fa fa-home\"></i>\r\n            </Link>\r\n             <FormContainer>\r\n            <ToastContainer/>\r\n           \r\n\r\n            <h4 className=\"text-center\">Update Post</h4>\r\n            {loadingUpdate?(\r\n                <Loader/>\r\n                ) : error ? (\r\n                <Message variant=\"danger\">{errorUpdate}</Message>\r\n                ) : (\r\n                    <Form className=\"createLabel\" validated>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    as=\"select\"\r\n                                    name=\"category\"\r\n                                    value={formData.category ? formData.category : '' }\r\n                                    isInvalid={errors.category}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                >\r\n                            \r\n                                {\r\n                                    categories.map((c) => \r\n                                    \r\n                                        <option key={c._id} value={c._id}>\r\n                                            {c.name}\r\n                                        </option>\r\n                                    )\r\n                                }\r\n                                {errors.category && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.category}\r\n                                    </Form.Text>\r\n                                )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    placeholder=\"Type Your Post Title\"\r\n                                    value={formData.title}\r\n                                    isInvalid={errors.title}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.title && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.title}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                        \r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Current Image</Form.Label>\r\n                                <Col md={2} xs={2} lg={2} >\r\n                                    <Image src={post.image} alt={post.title} fluid />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        \r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Image</Form.Label>\r\n                                <Form.Control\r\n                                    id = \"myFile\"\r\n                                    type=\"file\"\r\n                                    name=\"image\"\r\n                                    accept=\"image/jpeg,image/png,image/gif\"\r\n                                    onChange={(e) => {\r\n                                        handleImageChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.image && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                        {errors.image}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                required\r\n                                rows={10}\r\n                                name=\"description\"\r\n                                placeholder=\"Type Description\"\r\n                                value={formData.description}\r\n                                isInvalid={errors.description}\r\n                                onChange={(e) => {\r\n                                    handleChange(e);\r\n                                }}\r\n                            />\r\n                            {errors.description && (\r\n                                <Form.Text className=\"errMsg text-danger\">\r\n                                    {errors.description}\r\n                                </Form.Text>\r\n                            )}\r\n                        </Form.Group>\r\n                        <div className=\"btn-login\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={(e) => doSubmit(e)}\r\n                                >\r\n                                UPDATE\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                </Form>\r\n                    )\r\n            } \r\n            \r\n        </FormContainer>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default PostEditScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\RegisterScreen.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\ProfileScreen.js",["322","323","324","325","326","327"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\r\n//this constant is used to reset the frontend value after the update Action have been successfully fired on, so it refreshes the frontend before it renders it\r\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\r\nimport { listMyPost } from \"../actions/postActions\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport Trending from '../components/Trending'\r\nimport UserPost from '../components/UserPost'\r\n\r\nfunction ProfileScreen() {\r\n  const history = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setconfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  const postListMy = useSelector((state) => state.postListMy);\r\n  const { error:errorPostList, loading:loadingPostList, success:successPostList, myposts } = postListMy;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history(\"/login\");\r\n    }\r\n    else \r\n        {      \r\n        if (!user || !user.name || success || userInfo._id !== user._id) {\r\n            dispatch({ type: USER_UPDATE_PROFILE_RESET });\r\n            dispatch(getUserDetails(\"profile\"));\r\n            dispatch(listMyPost());\r\n        }\r\n        else {\r\n            dispatch(listMyPost());\r\n            setName(user.name);\r\n            setEmail(user.email);\r\n        }\r\n    }\r\n  }, [dispatch, history, userInfo, user, success]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n    } else {\r\n      dispatch(\r\n        updateUserProfile({\r\n          id: user._id,\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md={3}>\r\n          <h2>User Profile</h2>\r\n          {message && <Message variant=\"danger\">{message}</Message>}\r\n          {error && <Message variant=\"danger\">{error}</Message>}\r\n          {loading && <Loader />}\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"name\"\r\n                placeholder=\"Enter Username\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"passwordConfrim\">\r\n              <Form.Label>Confirm Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Confrim Password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setconfirmPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <br />\r\n            <div className=\"btn-login\">\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                Update\r\n                </Button>\r\n            </div>\r\n            \r\n          </Form>\r\n          <hr/>\r\n        </Col>\r\n        \r\n        <Col md={9}>\r\n         \r\n          <h2>My Posts</h2>\r\n            <br/>\r\n          {loadingPostList ? (\r\n            <Loader />\r\n          ) : errorPostList ? (\r\n            <Message variant=\"danger\">{errorPostList}</Message>\r\n          ) : (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-8\">                            \r\n                    {myposts.length !== 0 ? (\r\n                        myposts.map((post) => ( \r\n                            <UserPost post={post} key={post._id} />                                                        \r\n                        ))\r\n                        ):(\r\n                            <div class=\"alert alert-success\" role=\"alert\">\r\n                                <h4 class=\"alert-heading\"> <i class=\"fa-solid fa-sync fa-spin\"></i> YOU HAVE'NT POSTED ANYTHING YET!</h4>\r\n                            </div>\r\n                        )                     \r\n                    }                                                                           \r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <Trending/>\r\n                </div>\r\n            </div>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\UserPost.js",["328","329","330","331","332","333","334","335","336","337","338"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { ListGroup, Card, Col,Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Reactions from '../components/Reactions'\r\n\r\nfunction UserPost({ post }) {\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    let numLikes = (0);\r\n    let useLike;\r\n    {userInfo ? (\r\n        post.likes.map((like) => {                                               \r\n            return(\r\n                <span key={like._id}>\r\n                    {useLike = like.user == userInfo._id} \r\n                    {like.user == userInfo._id ? (numLikes = 1) : (numLikes)}                                                                  \r\n                </span>               \r\n            )\r\n        }) \r\n    ):(\r\n        <spa></spa>\r\n    )}\r\n\r\n\r\n    return (\r\n        <div>             \r\n            <div className=\"\">\r\n                <Card className=\"my-3 p-3 rounded\">\r\n                    <Row>\r\n                        <Col key={post._id} sm={12} md={6} lg={4} xl={4}>\r\n                            <Link to={`/post/${post._id}`}>\r\n                                <Card.Img src={post.image} />\r\n                            </Link>\r\n                        </Col>\r\n                        <Col  sm={12} md={6} lg={8} xl={8}>\r\n                            <Card.Body>\r\n                                <Link to={`/post/${post._id}`}>\r\n                                    <Card.Title as=\"div\" className=\"postTitle\">\r\n                                        <strong>{post.title}</strong>\r\n                                    </Card.Title>\r\n                                </Link>\r\n                                <Card.Text as=\"p\">\r\n                                    <div className=\"my-3\">\r\n                                    {post.description.substring(0,200)} {post.description.length >= 20 && <Link to={`/post/${post._id}`}>...Read More...</Link> } \r\n                                    </div>\r\n                                </Card.Text>\r\n                                <Card.Text as=\"div\" className=\"category\">\r\n                                    <button className=\"btn btn-outline-dark btn-sm mt-1 mb-1\">\r\n                                         {post.categories}\r\n                                         \r\n                                        \r\n                                         {/* {post.comments.map((comment) => (                      \r\n                                            <p key={comment._id}>{comment._id}</p>                                                        \r\n                                        ))}  */}\r\n                                        \r\n                                    </button>                                   \r\n                                </Card.Text>\r\n                                <hr/>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                           \r\n                                        <Reactions value={numLikes} likes={post.likes.length} comment={post.comments.length} post={post._id} user={post.user} />\r\n                                        \r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <p className=\"text-muted\">\r\n                                             <i className=\"fas fa-clock\" style={{ color:'#cc6600' }}></i>                                        \r\n                                             {post.createdAt.substring(0,10)}\r\n                                             ({moment(post.createdAt).fromNow()})\r\n                                             \r\n                                        </p>                                        \r\n                                    </div>\r\n                                </div>\r\n                            </Card.Body>  \r\n                        </Col>     \r\n                    </Row>                                 \r\n                </Card>                   \r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPost\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\Paginate.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\components\\SearchBox.js",[],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\UserListScreen.js",["339"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\UserEditScreen.js",["340","341","342","343","344"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { register } from \"../actions/userActions\";\r\nimport { getUserDetails, updateUser } from \"../actions/userActions\";\r\nimport { USER_UPDATE_RESET } from \"../constants/userConstants\";\r\n\r\nfunction UserEditScreen() {\r\n  const { id } = useParams();\r\n  const userId = id;\r\n  const history = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  //by default the isAdmin should be false\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate);\r\n  const {\r\n    error: errorUpdate,\r\n    loading: loadingUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history(\"/login\");\r\n    } else {\r\n      if (successUpdate) {\r\n        dispatch({ type: USER_UPDATE_RESET });\r\n        history(\"/admin/userlist\");\r\n      } else {\r\n        if (!user.name || user._id !== Number(userId)) {\r\n          dispatch(getUserDetails(userId));\r\n        } else {\r\n          setName(user.name);\r\n          setEmail(user.email);\r\n          setIsAdmin(user.isAdmin);\r\n        }\r\n      }\r\n    }\r\n  }, [user, userId, successUpdate, history]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateUser({ _id: user._id, name, email, isAdmin }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/admin/userlist\" className=\"btn btn-light my-3\">\r\n        GO BACK\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit User</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant=\"danger\">{error}</Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"isAdmin\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Is Admin\"\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <br />\r\n            <div className=\"btn-login\">\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                    Update\r\n                </Button>\r\n            </div>\r\n           \r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserEditScreen;\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\PostListScreen.js",["345","346","347","348","349","350","351","352","353","354"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Link } from 'react-router-dom'\r\nimport { Table, Button, Row, Col, Image } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport Paginate from \"../components/Paginate\";\r\nimport { listPosts, deletePost, listCategoryPost } from \"../actions/postActions\";\r\nimport { POST_CREATE_RESET } from '../constants/postConstants'\r\nimport ConfirmationModal from '../components/ConfirmationModal'\r\nimport moment from 'moment';\r\n\r\nfunction PostListScreen() {\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const [displayConfirmationModal, setDisplayConfirmationModal] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n    const [pid, setPid] = useState(null);\r\n\r\n    const postList = useSelector((state) => state.postList);\r\n    const { error, loading, posts, page, pages } = postList;\r\n\r\n    const postCreate = useSelector((state) => state.postCreate);\r\n    const { error:errorPostCreate, loading: loadingPostCreate, success: successPostCreate } = postCreate;\r\n\r\n    const listCategory = useSelector((state) => state.listCategory);\r\n    const { error:categoryError, loading: categoryLoading, success: categorySuccess, categories } = listCategory; \r\n\r\n    const postDelete = useSelector((state) => state.postDelete);\r\n    const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n    } = postDelete;\r\n\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    useEffect(() => {\r\n        dispatch({type: POST_CREATE_RESET})\r\n    \r\n        if(!userInfo.isAdmin){\r\n          history(\"/login\")\r\n        }else{\r\n          dispatch(listPosts());\r\n        }\r\n        dispatch(listCategoryPost());\r\n      }, [dispatch, history, userInfo, successDelete]);\r\n\r\n    const showDeleteModal = (pid) => {\r\n        setPid(pid);\r\n        setMessage(`Are you sure you want to delete this post '${posts.find((x) => x._id === pid).title}' ? `);\r\n        setDisplayConfirmationModal(true)\r\n    };\r\n\r\n    const hideConfirmationModal = () => {\r\n        setDisplayConfirmationModal(false);\r\n        \r\n    }\r\n\r\n    const deleteHandler = (pid) => {       \r\n        dispatch(deletePost(pid));\r\n        setDisplayConfirmationModal(false);\r\n    };\r\n    \r\n    const userIds = categories.map(cat => cat.name);\r\n    \r\n    return (\r\n        <div>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col>\r\n                <h1>Posts</h1>\r\n              </Col>\r\n              <Col className=\"btn-login\" xs lg=\"2\">\r\n                <Link className=\"my-3 btn btn-primary\" to=\"/createpost\">\r\n                  <i className=\"fas fa-plus\"></i> Create Post\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n\r\n          {loadingDelete && <Loader />}\r\n          {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\r\n\r\n          {loadingPostCreate && <Loader />}\r\n          {errorPostCreate && <Message variant=\"danger\">{errorPostCreate}</Message>}  \r\n\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Message variant=\"danger\">{error}</Message>\r\n          ) : (\r\n            <div>\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                  <thead>\r\n                    <tr>\r\n                     \r\n                      <th>TITLE</th>  \r\n                      <th>CATEGORY</th>\r\n                      <th>DATE CREATED</th>               \r\n                      <th>ACTIONS</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {posts.map((post) => (\r\n                      <tr key={post._id} >\r\n                       \r\n                        <td>{post.title}</td>\r\n                        <td> \r\n                            {post.categories}                      \r\n                        </td>\r\n                        <td>{moment(post.createdAt).fromNow()}</td>\r\n                        <td>\r\n                          <LinkContainer to={`/post/${post._id}/edit`}>\r\n                            <Button className=\"btn-sm\" variant=\"light\">\r\n                              <i className=\"fas fa-edit\"></i>\r\n                            </Button>\r\n                          </LinkContainer>\r\n                          <span> </span>\r\n                          <Button\r\n                            className=\"btn-sm\"\r\n                            variant=\"danger\"\r\n                            onClick={() => showDeleteModal(post._id)}\r\n                          >\r\n                            <i className=\"fas fa-trash\"></i>\r\n                          </Button>\r\n                          <span> </span>\r\n                          <LinkContainer to={`/post/${post._id}`}>\r\n                            <Button className=\"btn-sm\" variant=\"secondary\">\r\n                              <i className=\"fas fa-eye\"></i>\r\n                            </Button>\r\n                          </LinkContainer>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n                \r\n            </div>\r\n            \r\n          )}\r\n\r\n           <ConfirmationModal variantBtnDel={\"danger\"} ModalTitle={\"Confirmation\"} showModal={displayConfirmationModal} confirmModal={deleteHandler} hideModal={hideConfirmationModal}  pid={pid} message={message}  /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostListScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CategoryScreen.js",["355","356","357","358","359","360","361","362","363"],[],"C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CreateCategoryScreen.js",["364","365","366","367","368","369","370","371"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, FormControl, ListGroup } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { login } from \"../actions/userActions\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { createCategory, listCategoryPost } from '../actions/postActions'\r\nimport axios from 'axios';\r\nimport { CATEGORY_CREATE_RESET } from '../constants/postConstants'\r\n\r\nfunction CreateCategoryScreen() {\r\n\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { error, loading, userInfo } = userLogin;\r\n\r\n    const categoryCreate = useSelector((state) => state.categoryCreate);\r\n    const { error:errorCategoryCreate, loading: loadingCategoryCreate, success: successCategoryCreate } = categoryCreate;\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        name: \"\",\r\n    });\r\n\r\n    const handleChange = ({ currentTarget: input }) => {\r\n        let newData = { ...formData };\r\n        newData[input.name] = input.value;\r\n        setFormData(newData);\r\n    };\r\n\r\n    const clearForm = () => {  \r\n           \r\n        setFormData({\r\n            name: \"\",           \r\n        })\r\n    }\r\n\r\n    const doSubmit = async (e) => {        \r\n        e.preventDefault();\r\n        if(formData.name.trim().length === 0){\r\n            setErrors({\r\n                \"name\": [\r\n                    \"name field is required.\"\r\n                ]\r\n            })\r\n        }else{\r\n            try{\r\n                await dispatch(createCategory(\r\n                    formData,\r\n                    \r\n                ));\r\n            } catch (error){\r\n                console.log(error)\r\n            }\r\n\r\n        }    \r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!userInfo.isAdmin) {\r\n          history(\"/login\");\r\n        }\r\n        else if (successCategoryCreate) {\r\n            clearForm()   \r\n            toast.success('Category Created Successfully.', {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            }); \r\n            dispatch({type: CATEGORY_CREATE_RESET})    \r\n            dispatch(listCategoryPost());       \r\n          }\r\n        dispatch(listCategoryPost());\r\n      }, [dispatch, history, userInfo, errorCategoryCreate, successCategoryCreate]);\r\n\r\n\r\n    return (\r\n        <div>\r\n             <Link to=\"/admin/category\" className=\"btn btn-light my-3\">\r\n                <i className=\"fa fa-home\"></i>\r\n            </Link> \r\n            <FormContainer>                            \r\n                <ToastContainer/>\r\n                <h4 className=\"text-center\">Create Category</h4>\r\n                {loadingCategoryCreate ? (<Loader/>\r\n                    ) : errorCategoryCreate ? (\r\n                    <Message variant=\"danger\">{errorCategoryCreate}</Message>\r\n                    ) : (\r\n\r\n                        <Form className=\"createLabel\" validated>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Enter Category\"\r\n                                    value={formData.name}\r\n                                    isInvalid={errors.name}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.name && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.name}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <div className=\"btn-login\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={(e) => doSubmit(e)}\r\n                                >\r\n                                SUBMIT\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                </Form>\r\n                )\r\n            }\r\n\r\n            </FormContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateCategoryScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CategoryEditScreen.js",["372","373","374","375","376","377","378","379"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { Link, useParams, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row, Image } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { listCategoryPost, categoryDetail, updateCategory } from \"../actions/postActions\";\r\nimport { CATEGORY_UPDATE_RESET } from '../constants/postConstants'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction CategoryEditScreen() {\r\n\r\n    const { id } = useParams();\r\n    const categoryId = id;\r\n\r\n    const history = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const categoryDetails = useSelector((state) => state.categoryDetails);\r\n    const { error, loading, category } = categoryDetails;\r\n\r\n    const categoryUpdate = useSelector((state) => state.categoryUpdate);\r\n    const { error:errorCategoryUpdate, loading: loadingCategoryUpdate, success: successCategoryUpdate } = categoryUpdate;\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        name: \"\",\r\n    });\r\n\r\n    const handleChange = ({ currentTarget: input }) => {\r\n        let newData = { ...formData };\r\n        newData[input.name] = input.value;\r\n        setFormData(newData);\r\n    };\r\n\r\n    useEffect(() => {         \r\n        if(successCategoryUpdate){\r\n            dispatch({type: CATEGORY_UPDATE_RESET})\r\n            history('')\r\n            toast.success('Updated Successfully.', {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            }); \r\n        }else{\r\n            if (!category.name || category._id !== Number(categoryId)) {\r\n              dispatch(categoryDetail(categoryId));\r\n              } else {                 \r\n                let setData = { ...formData };\r\n                setData[\"name\"] = category.name;\r\n                setFormData(setData)\r\n              } \r\n          }        \r\n        dispatch(listCategoryPost());    \r\n    }, [dispatch, category, categoryId, history, successCategoryUpdate]);\r\n\r\n    const doSubmit = async (e) => {        \r\n        e.preventDefault();\r\n           await dispatch(updateCategory({\r\n                _id: categoryId,\r\n                name: formData.name,                \r\n            }));    \r\n         };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/admin/category\" className=\"btn btn-light my-3\">\r\n                <i className=\"fa fa-home\"></i>\r\n            </Link> \r\n            <FormContainer>                            \r\n                <ToastContainer/>\r\n                <h4 className=\"text-center\">Update Category</h4>\r\n                {loadingCategoryUpdate ? (<Loader/>\r\n                    ) : errorCategoryUpdate ? (\r\n                    <Message variant=\"danger\">{errorCategoryUpdate}</Message>\r\n                    ) : (\r\n\r\n                        <Form className=\"createLabel\" validated>\r\n                        <Row>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Enter Category\"\r\n                                    value={formData.name}\r\n                                    isInvalid={errors.name}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                    }}\r\n                                />\r\n                                {errors.name && (\r\n                                    <Form.Text className=\"errMsg text-danger\">\r\n                                            {errors.name}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <div className=\"btn-login\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                onClick={(e) => doSubmit(e)}\r\n                                >\r\n                                UPDATE\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                </Form>\r\n                )\r\n            }\r\n\r\n            </FormContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","C:\\Users\\Treemzy\\Documents\\ReactApps\\ReactDjangoBlog\\project\\frontend\\src\\screens\\CommentsListScreen.js",["380","381","382","383","384","385","386","387","388","389"],[],{"ruleId":"390","severity":1,"message":"391","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":16},{"ruleId":"390","severity":1,"message":"394","line":3,"column":18,"nodeType":"392","messageId":"393","endLine":3,"endColumn":27},{"ruleId":"390","severity":1,"message":"395","line":3,"column":47,"nodeType":"392","messageId":"393","endLine":3,"endColumn":52},{"ruleId":"390","severity":1,"message":"396","line":10,"column":8,"nodeType":"392","messageId":"393","endLine":10,"endColumn":17},{"ruleId":"390","severity":1,"message":"397","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":19},{"ruleId":"390","severity":1,"message":"398","line":3,"column":20,"nodeType":"392","messageId":"393","endLine":3,"endColumn":23},{"ruleId":"390","severity":1,"message":"399","line":3,"column":25,"nodeType":"392","messageId":"393","endLine":3,"endColumn":28},{"ruleId":"390","severity":1,"message":"400","line":9,"column":10,"nodeType":"392","messageId":"393","endLine":9,"endColumn":14},{"ruleId":"390","severity":1,"message":"401","line":12,"column":8,"nodeType":"392","messageId":"393","endLine":12,"endColumn":17},{"ruleId":"390","severity":1,"message":"402","line":13,"column":8,"nodeType":"392","messageId":"393","endLine":13,"endColumn":16},{"ruleId":"390","severity":1,"message":"403","line":18,"column":11,"nodeType":"392","messageId":"393","endLine":18,"endColumn":18},{"ruleId":"390","severity":1,"message":"404","line":19,"column":11,"nodeType":"392","messageId":"393","endLine":19,"endColumn":19},{"ruleId":"390","severity":1,"message":"405","line":28,"column":26,"nodeType":"392","messageId":"393","endLine":28,"endColumn":41},{"ruleId":"390","severity":1,"message":"406","line":30,"column":29,"nodeType":"392","messageId":"393","endLine":30,"endColumn":47},{"ruleId":"407","severity":1,"message":"408","line":49,"column":48,"nodeType":"409","messageId":"410","endLine":49,"endColumn":50},{"ruleId":"407","severity":1,"message":"408","line":89,"column":59,"nodeType":"409","messageId":"410","endLine":89,"endColumn":61},{"ruleId":"407","severity":1,"message":"408","line":101,"column":67,"nodeType":"409","messageId":"410","endLine":101,"endColumn":69},{"ruleId":"407","severity":1,"message":"408","line":178,"column":71,"nodeType":"409","messageId":"410","endLine":178,"endColumn":73},{"ruleId":"407","severity":1,"message":"408","line":192,"column":71,"nodeType":"409","messageId":"410","endLine":192,"endColumn":73},{"ruleId":"390","severity":1,"message":"411","line":10,"column":5,"nodeType":"392","messageId":"393","endLine":10,"endColumn":23},{"ruleId":"390","severity":1,"message":"412","line":32,"column":5,"nodeType":"392","messageId":"393","endLine":32,"endColumn":22},{"ruleId":"390","severity":1,"message":"413","line":41,"column":5,"nodeType":"392","messageId":"393","endLine":41,"endColumn":22},{"ruleId":"390","severity":1,"message":"414","line":46,"column":5,"nodeType":"392","messageId":"393","endLine":46,"endColumn":23},{"ruleId":"390","severity":1,"message":"415","line":51,"column":5,"nodeType":"392","messageId":"393","endLine":51,"endColumn":24},{"ruleId":"390","severity":1,"message":"416","line":60,"column":5,"nodeType":"392","messageId":"393","endLine":60,"endColumn":26},{"ruleId":"390","severity":1,"message":"417","line":65,"column":5,"nodeType":"392","messageId":"393","endLine":65,"endColumn":26},{"ruleId":"390","severity":1,"message":"418","line":70,"column":5,"nodeType":"392","messageId":"393","endLine":70,"endColumn":27},{"ruleId":"390","severity":1,"message":"419","line":75,"column":5,"nodeType":"392","messageId":"393","endLine":75,"endColumn":29},{"ruleId":"390","severity":1,"message":"420","line":78,"column":11,"nodeType":"392","messageId":"393","endLine":78,"endColumn":16},{"ruleId":"390","severity":1,"message":"421","line":261,"column":15,"nodeType":"392","messageId":"393","endLine":261,"endColumn":19},{"ruleId":"390","severity":1,"message":"421","line":349,"column":15,"nodeType":"392","messageId":"393","endLine":349,"endColumn":19},{"ruleId":"390","severity":1,"message":"421","line":527,"column":15,"nodeType":"392","messageId":"393","endLine":527,"endColumn":19},{"ruleId":"390","severity":1,"message":"422","line":1,"column":17,"nodeType":"392","messageId":"393","endLine":1,"endColumn":25},{"ruleId":"390","severity":1,"message":"423","line":1,"column":27,"nodeType":"392","messageId":"393","endLine":1,"endColumn":36},{"ruleId":"390","severity":1,"message":"424","line":2,"column":10,"nodeType":"392","messageId":"393","endLine":2,"endColumn":21},{"ruleId":"390","severity":1,"message":"425","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":21},{"ruleId":"390","severity":1,"message":"426","line":3,"column":23,"nodeType":"392","messageId":"393","endLine":3,"endColumn":34},{"ruleId":"390","severity":1,"message":"397","line":4,"column":10,"nodeType":"392","messageId":"393","endLine":4,"endColumn":19},{"ruleId":"390","severity":1,"message":"427","line":7,"column":10,"nodeType":"392","messageId":"393","endLine":7,"endColumn":25},{"ruleId":"390","severity":1,"message":"428","line":16,"column":9,"nodeType":"392","messageId":"393","endLine":16,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":17,"column":5,"nodeType":"431","messageId":"432","endLine":28,"endColumn":7},{"ruleId":"407","severity":1,"message":"408","line":21,"column":42,"nodeType":"409","messageId":"410","endLine":21,"endColumn":44},{"ruleId":"407","severity":1,"message":"408","line":22,"column":32,"nodeType":"409","messageId":"410","endLine":22,"endColumn":34},{"ruleId":"390","severity":1,"message":"433","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":16},{"ruleId":"390","severity":1,"message":"434","line":3,"column":18,"nodeType":"392","messageId":"393","endLine":3,"endColumn":22},{"ruleId":"390","severity":1,"message":"435","line":5,"column":26,"nodeType":"392","messageId":"393","endLine":5,"endColumn":41},{"ruleId":"390","severity":1,"message":"436","line":5,"column":43,"nodeType":"392","messageId":"393","endLine":5,"endColumn":52},{"ruleId":"390","severity":1,"message":"437","line":6,"column":10,"nodeType":"392","messageId":"393","endLine":6,"endColumn":32},{"ruleId":"390","severity":1,"message":"420","line":7,"column":26,"nodeType":"392","messageId":"393","endLine":7,"endColumn":31},{"ruleId":"390","severity":1,"message":"438","line":13,"column":13,"nodeType":"392","messageId":"393","endLine":13,"endColumn":15},{"ruleId":"390","severity":1,"message":"439","line":20,"column":13,"nodeType":"392","messageId":"393","endLine":20,"endColumn":20},{"ruleId":"390","severity":1,"message":"440","line":20,"column":22,"nodeType":"392","messageId":"393","endLine":20,"endColumn":27},{"ruleId":"390","severity":1,"message":"441","line":24,"column":21,"nodeType":"392","messageId":"393","endLine":24,"endColumn":38},{"ruleId":"390","severity":1,"message":"442","line":24,"column":47,"nodeType":"392","messageId":"393","endLine":24,"endColumn":62},{"ruleId":"390","severity":1,"message":"443","line":30,"column":19,"nodeType":"392","messageId":"393","endLine":30,"endColumn":32},{"ruleId":"390","severity":1,"message":"444","line":30,"column":42,"nodeType":"392","messageId":"393","endLine":30,"endColumn":57},{"ruleId":"445","severity":1,"message":"446","line":63,"column":10,"nodeType":"447","endLine":63,"endColumn":58,"suggestions":"448"},{"ruleId":"407","severity":1,"message":"408","line":87,"column":41,"nodeType":"409","messageId":"410","endLine":87,"endColumn":43},{"ruleId":"407","severity":1,"message":"408","line":107,"column":37,"nodeType":"409","messageId":"410","endLine":107,"endColumn":39},{"ruleId":"390","severity":1,"message":"411","line":19,"column":36,"nodeType":"392","messageId":"393","endLine":19,"endColumn":54},{"ruleId":"390","severity":1,"message":"420","line":21,"column":26,"nodeType":"392","messageId":"393","endLine":21,"endColumn":31},{"ruleId":"390","severity":1,"message":"403","line":27,"column":11,"nodeType":"392","messageId":"393","endLine":27,"endColumn":18},{"ruleId":"390","severity":1,"message":"449","line":41,"column":22,"nodeType":"392","messageId":"393","endLine":41,"endColumn":35},{"ruleId":"390","severity":1,"message":"450","line":41,"column":44,"nodeType":"392","messageId":"393","endLine":41,"endColumn":55},{"ruleId":"390","severity":1,"message":"451","line":61,"column":11,"nodeType":"392","messageId":"393","endLine":61,"endColumn":18},{"ruleId":"390","severity":1,"message":"428","line":64,"column":9,"nodeType":"392","messageId":"393","endLine":64,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":65,"column":5,"nodeType":"431","messageId":"432","endLine":76,"endColumn":7},{"ruleId":"407","severity":1,"message":"408","line":69,"column":42,"nodeType":"409","messageId":"410","endLine":69,"endColumn":44},{"ruleId":"407","severity":1,"message":"408","line":70,"column":32,"nodeType":"409","messageId":"410","endLine":70,"endColumn":34},{"ruleId":"390","severity":1,"message":"452","line":3,"column":34,"nodeType":"392","messageId":"393","endLine":3,"endColumn":45},{"ruleId":"390","severity":1,"message":"420","line":9,"column":26,"nodeType":"392","messageId":"393","endLine":9,"endColumn":31},{"ruleId":"390","severity":1,"message":"453","line":19,"column":5,"nodeType":"392","messageId":"393","endLine":19,"endColumn":30},{"ruleId":"390","severity":1,"message":"454","line":24,"column":5,"nodeType":"392","messageId":"393","endLine":24,"endColumn":20},{"ruleId":"390","severity":1,"message":"399","line":3,"column":24,"nodeType":"392","messageId":"393","endLine":3,"endColumn":27},{"ruleId":"390","severity":1,"message":"452","line":3,"column":34,"nodeType":"392","messageId":"393","endLine":3,"endColumn":45},{"ruleId":"390","severity":1,"message":"397","line":3,"column":47,"nodeType":"392","messageId":"393","endLine":3,"endColumn":56},{"ruleId":"390","severity":1,"message":"455","line":8,"column":10,"nodeType":"392","messageId":"393","endLine":8,"endColumn":15},{"ruleId":"390","severity":1,"message":"456","line":12,"column":8,"nodeType":"392","messageId":"393","endLine":12,"endColumn":13},{"ruleId":"390","severity":1,"message":"404","line":17,"column":11,"nodeType":"392","messageId":"393","endLine":17,"endColumn":19},{"ruleId":"390","severity":1,"message":"440","line":22,"column":13,"nodeType":"392","messageId":"393","endLine":22,"endColumn":18},{"ruleId":"390","severity":1,"message":"439","line":22,"column":20,"nodeType":"392","messageId":"393","endLine":22,"endColumn":27},{"ruleId":"390","severity":1,"message":"457","line":25,"column":19,"nodeType":"392","messageId":"393","endLine":25,"endColumn":32},{"ruleId":"390","severity":1,"message":"458","line":25,"column":42,"nodeType":"392","messageId":"393","endLine":25,"endColumn":57},{"ruleId":"390","severity":1,"message":"459","line":25,"column":67,"nodeType":"392","messageId":"393","endLine":25,"endColumn":82},{"ruleId":"390","severity":1,"message":"424","line":2,"column":10,"nodeType":"392","messageId":"393","endLine":2,"endColumn":21},{"ruleId":"390","severity":1,"message":"460","line":2,"column":23,"nodeType":"392","messageId":"393","endLine":2,"endColumn":34},{"ruleId":"390","severity":1,"message":"461","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":20},{"ruleId":"390","severity":1,"message":"456","line":2,"column":8,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"404","line":20,"column":11,"nodeType":"392","messageId":"393","endLine":20,"endColumn":19},{"ruleId":"390","severity":1,"message":"457","line":24,"column":19,"nodeType":"392","messageId":"393","endLine":24,"endColumn":32},{"ruleId":"390","severity":1,"message":"458","line":24,"column":43,"nodeType":"392","messageId":"393","endLine":24,"endColumn":58},{"ruleId":"390","severity":1,"message":"459","line":24,"column":69,"nodeType":"392","messageId":"393","endLine":24,"endColumn":84},{"ruleId":"390","severity":1,"message":"439","line":27,"column":20,"nodeType":"392","messageId":"393","endLine":27,"endColumn":27},{"ruleId":"390","severity":1,"message":"462","line":40,"column":20,"nodeType":"392","messageId":"393","endLine":40,"endColumn":29},{"ruleId":"445","severity":1,"message":"463","line":85,"column":8,"nodeType":"447","endLine":85,"endColumn":56,"suggestions":"464"},{"ruleId":"390","severity":1,"message":"400","line":2,"column":10,"nodeType":"392","messageId":"393","endLine":2,"endColumn":14},{"ruleId":"390","severity":1,"message":"465","line":3,"column":34,"nodeType":"392","messageId":"393","endLine":3,"endColumn":39},{"ruleId":"390","severity":1,"message":"466","line":7,"column":8,"nodeType":"392","messageId":"393","endLine":7,"endColumn":21},{"ruleId":"390","severity":1,"message":"467","line":12,"column":10,"nodeType":"392","messageId":"393","endLine":12,"endColumn":23},{"ruleId":"390","severity":1,"message":"404","line":18,"column":9,"nodeType":"392","messageId":"393","endLine":18,"endColumn":17},{"ruleId":"390","severity":1,"message":"468","line":38,"column":65,"nodeType":"392","messageId":"393","endLine":38,"endColumn":80},{"ruleId":"390","severity":1,"message":"422","line":1,"column":17,"nodeType":"392","messageId":"393","endLine":1,"endColumn":25},{"ruleId":"390","severity":1,"message":"423","line":1,"column":27,"nodeType":"392","messageId":"393","endLine":1,"endColumn":36},{"ruleId":"390","severity":1,"message":"424","line":2,"column":10,"nodeType":"392","messageId":"393","endLine":2,"endColumn":21},{"ruleId":"390","severity":1,"message":"425","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":21},{"ruleId":"390","severity":1,"message":"426","line":3,"column":23,"nodeType":"392","messageId":"393","endLine":3,"endColumn":34},{"ruleId":"390","severity":1,"message":"397","line":4,"column":10,"nodeType":"392","messageId":"393","endLine":4,"endColumn":19},{"ruleId":"390","severity":1,"message":"427","line":7,"column":10,"nodeType":"392","messageId":"393","endLine":7,"endColumn":25},{"ruleId":"390","severity":1,"message":"428","line":16,"column":9,"nodeType":"392","messageId":"393","endLine":16,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":17,"column":5,"nodeType":"431","messageId":"432","endLine":28,"endColumn":7},{"ruleId":"407","severity":1,"message":"408","line":21,"column":42,"nodeType":"409","messageId":"410","endLine":21,"endColumn":44},{"ruleId":"407","severity":1,"message":"408","line":22,"column":32,"nodeType":"409","messageId":"410","endLine":22,"endColumn":34},{"ruleId":"445","severity":1,"message":"469","line":46,"column":12,"nodeType":"447","endLine":46,"endColumn":46,"suggestions":"470"},{"ruleId":"390","severity":1,"message":"399","line":3,"column":24,"nodeType":"392","messageId":"393","endLine":3,"endColumn":27},{"ruleId":"390","severity":1,"message":"398","line":3,"column":29,"nodeType":"392","messageId":"393","endLine":3,"endColumn":32},{"ruleId":"390","severity":1,"message":"471","line":8,"column":10,"nodeType":"392","messageId":"393","endLine":8,"endColumn":18},{"ruleId":"390","severity":1,"message":"404","line":16,"column":9,"nodeType":"392","messageId":"393","endLine":16,"endColumn":17},{"ruleId":"445","severity":1,"message":"472","line":56,"column":6,"nodeType":"447","endLine":56,"endColumn":44,"suggestions":"473"},{"ruleId":"390","severity":1,"message":"474","line":5,"column":35,"nodeType":"392","messageId":"393","endLine":5,"endColumn":40},{"ruleId":"390","severity":1,"message":"402","line":9,"column":8,"nodeType":"392","messageId":"393","endLine":9,"endColumn":16},{"ruleId":"390","severity":1,"message":"404","line":17,"column":11,"nodeType":"392","messageId":"393","endLine":17,"endColumn":19},{"ruleId":"390","severity":1,"message":"475","line":25,"column":36,"nodeType":"392","messageId":"393","endLine":25,"endColumn":40},{"ruleId":"390","severity":1,"message":"476","line":25,"column":42,"nodeType":"392","messageId":"393","endLine":25,"endColumn":47},{"ruleId":"390","severity":1,"message":"477","line":28,"column":73,"nodeType":"392","messageId":"393","endLine":28,"endColumn":90},{"ruleId":"390","severity":1,"message":"457","line":31,"column":19,"nodeType":"392","messageId":"393","endLine":31,"endColumn":32},{"ruleId":"390","severity":1,"message":"458","line":31,"column":43,"nodeType":"392","messageId":"393","endLine":31,"endColumn":58},{"ruleId":"390","severity":1,"message":"459","line":31,"column":69,"nodeType":"392","messageId":"393","endLine":31,"endColumn":84},{"ruleId":"390","severity":1,"message":"451","line":70,"column":11,"nodeType":"392","messageId":"393","endLine":70,"endColumn":18},{"ruleId":"390","severity":1,"message":"404","line":13,"column":11,"nodeType":"392","messageId":"393","endLine":13,"endColumn":19},{"ruleId":"390","severity":1,"message":"459","line":22,"column":69,"nodeType":"392","messageId":"393","endLine":22,"endColumn":84},{"ruleId":"390","severity":1,"message":"405","line":31,"column":26,"nodeType":"392","messageId":"393","endLine":31,"endColumn":41},{"ruleId":"390","severity":1,"message":"406","line":33,"column":29,"nodeType":"392","messageId":"393","endLine":33,"endColumn":47},{"ruleId":"407","severity":1,"message":"408","line":52,"column":48,"nodeType":"409","messageId":"410","endLine":52,"endColumn":50},{"ruleId":"407","severity":1,"message":"408","line":92,"column":59,"nodeType":"409","messageId":"410","endLine":92,"endColumn":61},{"ruleId":"407","severity":1,"message":"408","line":104,"column":67,"nodeType":"409","messageId":"410","endLine":104,"endColumn":69},{"ruleId":"407","severity":1,"message":"408","line":238,"column":53,"nodeType":"409","messageId":"410","endLine":238,"endColumn":55},{"ruleId":"407","severity":1,"message":"408","line":252,"column":53,"nodeType":"409","messageId":"410","endLine":252,"endColumn":55},{"ruleId":"390","severity":1,"message":"399","line":3,"column":24,"nodeType":"392","messageId":"393","endLine":3,"endColumn":27},{"ruleId":"390","severity":1,"message":"452","line":3,"column":34,"nodeType":"392","messageId":"393","endLine":3,"endColumn":45},{"ruleId":"390","severity":1,"message":"397","line":3,"column":47,"nodeType":"392","messageId":"393","endLine":3,"endColumn":56},{"ruleId":"390","severity":1,"message":"455","line":8,"column":10,"nodeType":"392","messageId":"393","endLine":8,"endColumn":15},{"ruleId":"390","severity":1,"message":"456","line":12,"column":8,"nodeType":"392","messageId":"393","endLine":12,"endColumn":13},{"ruleId":"390","severity":1,"message":"404","line":18,"column":11,"nodeType":"392","messageId":"393","endLine":18,"endColumn":19},{"ruleId":"390","severity":1,"message":"440","line":23,"column":13,"nodeType":"392","messageId":"393","endLine":23,"endColumn":18},{"ruleId":"390","severity":1,"message":"439","line":23,"column":20,"nodeType":"392","messageId":"393","endLine":23,"endColumn":27},{"ruleId":"390","severity":1,"message":"456","line":2,"column":8,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"399","line":4,"column":24,"nodeType":"392","messageId":"393","endLine":4,"endColumn":27},{"ruleId":"390","severity":1,"message":"474","line":4,"column":34,"nodeType":"392","messageId":"393","endLine":4,"endColumn":39},{"ruleId":"390","severity":1,"message":"404","line":21,"column":11,"nodeType":"392","messageId":"393","endLine":21,"endColumn":19},{"ruleId":"390","severity":1,"message":"440","line":25,"column":13,"nodeType":"392","messageId":"393","endLine":25,"endColumn":18},{"ruleId":"390","severity":1,"message":"439","line":25,"column":20,"nodeType":"392","messageId":"393","endLine":25,"endColumn":27},{"ruleId":"390","severity":1,"message":"462","line":34,"column":20,"nodeType":"392","messageId":"393","endLine":34,"endColumn":29},{"ruleId":"445","severity":1,"message":"463","line":61,"column":8,"nodeType":"447","endLine":61,"endColumn":72,"suggestions":"478"},{"ruleId":"390","severity":1,"message":"467","line":3,"column":10,"nodeType":"392","messageId":"393","endLine":3,"endColumn":23},{"ruleId":"390","severity":1,"message":"400","line":4,"column":10,"nodeType":"392","messageId":"393","endLine":4,"endColumn":14},{"ruleId":"390","severity":1,"message":"474","line":5,"column":35,"nodeType":"392","messageId":"393","endLine":5,"endColumn":40},{"ruleId":"390","severity":1,"message":"402","line":9,"column":8,"nodeType":"392","messageId":"393","endLine":9,"endColumn":16},{"ruleId":"390","severity":1,"message":"404","line":16,"column":11,"nodeType":"392","messageId":"393","endLine":16,"endColumn":19},{"ruleId":"390","severity":1,"message":"479","line":24,"column":19,"nodeType":"392","messageId":"393","endLine":24,"endColumn":28},{"ruleId":"390","severity":1,"message":"480","line":24,"column":38,"nodeType":"392","messageId":"393","endLine":24,"endColumn":49},{"ruleId":"390","severity":1,"message":"481","line":24,"column":51,"nodeType":"392","messageId":"393","endLine":24,"endColumn":56},{"ruleId":"390","severity":1,"message":"482","line":31,"column":16,"nodeType":"392","messageId":"393","endLine":31,"endColumn":29},{"ruleId":"390","severity":1,"message":"483","line":32,"column":14,"nodeType":"392","messageId":"393","endLine":32,"endColumn":25},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Badge' is defined but never used.","'SearchBox' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Link' is defined but never used.","'Reactions' is defined but never used.","'Paginate' is defined but never used.","'history' is assigned a value but never used.","'location' is assigned a value but never used.","'setItemsPerPage' is assigned a value but never used.","'setPageNumberLimit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'POST_DETAILS_RESET' is defined but never used.","'POST_CREATE_RESET' is defined but never used.","'POST_UPDATE_RESET' is defined but never used.","'POST_LIST_MY_RESET' is defined but never used.","'CATEGORY_LIST_RESET' is defined but never used.","'CATEGORY_CREATE_RESET' is defined but never used.","'CATEGORY_UPDATE_RESET' is defined but never used.","'CATEGORY_DETAILS_RESET' is defined but never used.","'POST_LIST_COMMENTS_RESET' is defined but never used.","'toast' is defined but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useNavigate' is defined but never used.","'useLocation' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'useLike' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Button' is defined but never used.","'Form' is defined but never used.","'listPostDetails' is defined but never used.","'listPosts' is defined but never used.","'POST_CREATE_LIKE_RESET' is defined but never used.","'id' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'loadingPostDelete' is assigned a value but never used.","'errorPostDelete' is assigned a value but never used.","'postListError' is assigned a value but never used.","'postListLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["484"],"'deleteLoading' is assigned a value but never used.","'deleteError' is assigned a value but never used.","'userIds' is assigned a value but never used.","'FormControl' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'USER_LIST_RESET' is defined but never used.","'login' is defined but never used.","'axios' is defined but never used.","'categoryError' is assigned a value but never used.","'categoryLoading' is assigned a value but never used.","'categorySuccess' is assigned a value but never used.","'useSelector' is defined but never used.","'createPost' is defined but never used.","'setErrors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array.",["485"],"'Table' is defined but never used.","'FormContainer' is defined but never used.","'LinkContainer' is defined but never used.","'successPostList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["486"],"'register' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userInfo'. Either include them or remove the dependency array.",["487"],"'Image' is defined but never used.","'page' is assigned a value but never used.","'pages' is assigned a value but never used.","'successPostCreate' is assigned a value but never used.",["488"],"'postError' is assigned a value but never used.","'postLoading' is assigned a value but never used.","'posts' is assigned a value but never used.","'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.",{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},"Update the dependencies array to be: [dispatch, history, post, successLike, successPostDelete]",{"range":"499","text":"500"},"Update the dependencies array to be: [dispatch, post, postId, history, successUpdate, formData]",{"range":"501","text":"502"},"Update the dependencies array to be: [dispatch, history, successDelete, userInfo]",{"range":"503","text":"504"},"Update the dependencies array to be: [user, userId, successUpdate, history, userInfo, dispatch]",{"range":"505","text":"506"},"Update the dependencies array to be: [dispatch, category, categoryId, history, successCategoryUpdate, formData]",{"range":"507","text":"508"},[2199,2247],"[dispatch, history, post, successLike, successPostDelete]",[2851,2899],"[dispatch, post, postId, history, successUpdate, formData]",[1642,1676],"[dispatch, history, successDelete, userInfo]",[1818,1856],"[user, userId, successUpdate, history, userInfo, dispatch]",[2261,2325],"[dispatch, category, categoryId, history, successCategoryUpdate, formData]"]